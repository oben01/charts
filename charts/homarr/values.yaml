# -- Default values for homarr
# -- Declare variables to be passed into your templates.

# -- Number of replicas
replicaCount: 1

image:
  # -- Image repository
  repository: ghcr.io/ajnart/homarr
  # -- Image pull policy
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion
  tag: "0.15.10"

env:
  # -- Your local time zone
  TZ: "Europe/Paris"
  # -- Colors and preferences, possible values dark / light
  DEFAULT_COLOR_SCHEME: "dark"
  # -- Enabled authentication methods. Multiple providers can be enabled with by separating them with , (ex. AUTH_PROVIDER=credentials,oidc, it is highly recommended to just enable one provider).
  AUTH_PROVIDER: "credentials"
  # -- URI of your LDAP server
  AUTH_LDAP_URI:
  # -- Base dn of your LDAP server
  AUTH_LDAP_BASE:
  # -- User used for finding users and groups
  AUTH_LDAP_BIND_DN:
  # -- Attribute used for username
  AUTH_LDAP_USERNAME_ATTRIBUTE: "uid"
  # -- Class used for querying groups
  AUTH_LDAP_GROUP_CLASS: "groupOfUniqueNames"
  # -- Attribute used for querying group member
  AUTH_LDAP_GROUP_MEMBER_ATTRIBUTE: "member"
  # -- User attribute used for comparing with group member
  AUTH_LDAP_GROUP_MEMBER_USER_ATTRIBUTE: "dn"
  # -- Admin group
  AUTH_LDAP_ADMIN_GROUP: "admin"
  # -- Owner group
  AUTH_LDAP_OWNER_GROUP: "admin"
  # -- LDAP search scope between base, one or sub
  AUTH_LDAP_SEARCH_SCOPE: "base"
  # -- URI of OIDC provider
  AUTH_OIDC_URI:
  # -- Display name of provider (in login screen)
  AUTH_OIDC_CLIENT_NAME: "OIDC"
  # -- Admin group
  AUTH_OIDC_ADMIN_GROUP: "admin"
  # -- Owner group
  AUTH_OIDC_OWNER_GROUP: "admin"
  # -- Override the OIDC scopes
  AUTH_OIDC_SCOPE_OVERWRITE: "openid email profile groups"
  # -- URL for the Homarr database
  DATABASE_URL: file:/app/database/db.sqlite

# Sensitive values that need to be passed in through environment variables should use kubernetes secrets. In order
# to use this, create the secret in your target namespace before applying this helm chart. If you really want to,
# you CAN just put these in the env block above, but that is not recommended.
envSecrets:
  # -- ID of OIDC client (application)
  AUTH_OIDC_CLIENT_ID:
   key: # key name within the secret
   name: # name of the secret

  # -- Secret of OIDC client (application)
  AUTH_OIDC_CLIENT_SECRET:
    key: # key name within the secret
    name: # name of the secret

  # -- Password for bind user
  AUTH_LDAP_BIND_PASSWORD:
    key: # key name within the secret
    name: # name of the secret

# -- Secrets for Docker registry
imagePullSecrets: []
# -- Overrides chart's name
nameOverride: ""
# -- Overrides chart's fullname
fullnameOverride: ""

# -- Pod annotations
podAnnotations: {}
# -- Pod labels
podLabels: {}

# -- Pod security context
podSecurityContext: {}
# fsGroup: 2000

# -- Security context
securityContext: {}
#   capabilities:
#     drop:
#     - ALL
#   readOnlyRootFilesystem: true
#   runAsNonRoot: true
#   runAsUser: 1000

# -- Service configuration
service:
  # -- Service type
  type: ClusterIP
  # -- Service port
  port: 7575
  # -- Service target port
  targetPort: 7575

# -- Ingress configuration
ingress:
  # -- Enable ingress
  enabled: true
  # -- Ingress class name
  ingressClassName: ""
  # -- Ingress annotations
  annotations: {}
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  # -- Ingress hosts configuration
  hosts:
    - host: chart-example.local
      paths:
        - path: /
  # -- Ingress TLS configuration
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- Resource configuration
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
#   memory: 128Mi

# -- Autoscaling configuration
autoscaling:
  # -- Enable autoscaling
  enabled: false
  # -- Minimum replicas
  minReplicas: 1
  # -- Maximum replicas
  maxReplicas: 100
  # -- Target CPU utilization for autoscaling
  targetCPUUtilizationPercentage: 80
  # -- Target Memory utilization for autoscaling
  # targetMemoryUtilizationPercentage: 80
# -- Additional volumes on the output Deployment definition.

# -- Persistent storage configuration
persistence:
  - name: homarr-config
    # -- Enable homarr-config persistent storage
    enabled: false
    # -- homarr-config storage class name
    storageClassName: "local-path"
    # -- homarr-config access mode
    accessMode: "ReadWriteOnce"
    # -- homarr-config storage size
    size: "50Mi"
    # -- homarr-config mount path inside the pod
    mountPath: "/app/data/configs"
  - name: homarr-database
    # -- Enable homarr-database persistent storage
    enabled: false
    # -- homarr-database storage class name
    storageClassName: "local-path"
    # -- homarr-database access mode
    accessMode: "ReadWriteOnce"
    # -- homarr-database storage size
    size: "50Mi"
    # -- homarr-database mount path inside the pod
    mountPath: "/app/database"
  - name: homarr-icons
    # -- Enable homarr-icons persistent storage
    enabled: false
    # -- homarr-icons storage class name
    storageClassName: "local-path"
    # -- homarr-icons access mode
    accessMode: "ReadWriteOnce"
    # -- homarr-icons storage size
    size: "50Mi"
    # -- homarr-icons mount path inside the pod
    mountPath: "/app/public/icons"

# -- Node selectors for pod scheduling
nodeSelector: {}
# -- Node tolerations for pod scheduling
tolerations: []
# -- Node affinity for pod scheduling
affinity: {}

livenessProbe:
  httpGet:
    # -- This is the liveness check endpoint used by Kubernetes to determine if the application is still running.
    path: /
    # -- The port on which the liveness check will be performed. This must be the same as the container port exposed by the application.
    port: 7575
  # -- Number of seconds after the container has started before startup
  initialDelaySeconds: 10
  # -- Number of seconds after which the probe times out
  timeoutSeconds: 3
  # -- How often (in seconds) to perform the liveness probe.
  periodSeconds: 10
  # -- The number of consecutive failed liveness probe attempts before the container is considered unhealthy.
  failureThreshold: 5

readinessProbe:
  httpGet:
    # -- This is the readiness check endpoint used by Kubernetes to determine if the application is ready to handle traffic.
    path: /
    # -- The port on which the readiness check will be performed. This must match the container's exposed port.
    port: 7575
  # -- Number of seconds after the container has started before startup
  initialDelaySeconds: 10
  # -- Number of seconds after which the probe times out
  timeoutSeconds: 3
  # -- How often (in seconds) to perform the readiness probe.
  periodSeconds: 10
  # -- The number of consecutive failed readiness probe attempts before the container is considered "Not Ready."
  failureThreshold: 5